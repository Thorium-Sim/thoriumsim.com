generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  role_id  Int        @id @default(autoincrement())
  name     String?
  UserRole UserRole[]
}

model User {
  user_id           Int        @id(map: "users_pkey") @default(autoincrement())
  email             String     @unique(map: "users_email_key")
  password          String
  profilePictureUrl String?
  displayName       String?
  bio               String?
  Post              Post[]
  UserRole          UserRole[]
}

model UserRole {
  userRole_id Int   @id @default(autoincrement())
  user_id     Int?
  role_id     Int?
  Role        Role? @relation(fields: [role_id], references: [role_id], onDelete: Cascade, onUpdate: NoAction, map: "UserRole_role_id")
  User        User? @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "UserRole_User_id")
}

model Post {
  post_id           Int                 @id @default(autoincrement())
  user_id           Int
  publishDate       DateTime?           @default(dbgenerated("CURRENT_DATE")) @db.Timestamp(6)
  featuredImageUrl  String?
  body              String?
  title             String
  slug              String              @unique
  published         Boolean?            @default(false)
  excerpt           String?
  newsletterDate    DateTime?           @db.Timestamp(6)
  newsletterSent    Boolean             @default(false)
  User              User                @relation(fields: [user_id], references: [user_id], onDelete: SetNull, map: "Post_user_id")
  PostSubscriberTag PostSubscriberTag[]
  PostTag           PostTag[]
}

model PostTag {
  post_tag_id Int   @id @default(autoincrement())
  post_id     Int?
  tag_id      Int?
  Post        Post? @relation(fields: [post_id], references: [post_id], onDelete: Cascade, onUpdate: NoAction, map: "Post_tag_post_id")
  Tag         Tag?  @relation(fields: [tag_id], references: [tag_id], onDelete: Cascade, onUpdate: NoAction, map: "Post_tag_tag_id")
}

model Tag {
  tag_id  Int       @id @default(autoincrement())
  tag     String?   @unique
  PostTag PostTag[]
}

model Subscriber {
  subscriber_id       Int                   @id @default(autoincrement())
  email               String                @unique
  firstName           String?
  status              String                @default("pending")
  created_at          DateTime              @default(now()) @db.Timestamp(6)
  SubscriberEmailOpen SubscriberEmailOpen[]
  SubscriberTagLookup SubscriberTagLookup[]
}

model SubscriberTag {
  subscriberTag_id    Int                   @id @default(autoincrement())
  tag                 String                @unique
  PostSubscriberTag   PostSubscriberTag[]
  SubscriberTagLookup SubscriberTagLookup[]
}

model SubscriberTagLookup {
  subscriber_tag_lookup_id Int            @id @default(autoincrement())
  subscriber_id            Int?
  subscriber_tag_id        Int?
  Subscriber               Subscriber?    @relation(fields: [subscriber_id], references: [subscriber_id], onDelete: Cascade, onUpdate: NoAction)
  SubscriberTag            SubscriberTag? @relation(fields: [subscriber_tag_id], references: [subscriberTag_id], onDelete: Cascade, onUpdate: NoAction)
}

model SubscriberEmailOpen {
  subscriber_email_open_id Int         @id @default(autoincrement())
  subscriber_id            Int?
  opened_at                DateTime    @default(now()) @db.Timestamp(6)
  broadcast_id             Int
  Subscriber               Subscriber? @relation(fields: [subscriber_id], references: [subscriber_id], onDelete: Cascade, onUpdate: NoAction)
}

model PostSubscriberTag {
  post_subscriber_tag_id Int            @id @default(autoincrement())
  post_id                Int?
  subscriber_tag_id      Int?
  Post                   Post?          @relation(fields: [post_id], references: [post_id], onDelete: Cascade, onUpdate: NoAction)
  SubscriberTag          SubscriberTag? @relation(fields: [subscriber_tag_id], references: [subscriberTag_id], onDelete: Cascade, onUpdate: NoAction)
}
